{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport { ErrorFactory } from '@firebase/util';\nimport Errors from '../models/errors';\nimport TokenDetailsModel from '../models/token-details-model';\nimport VapidDetailsModel from '../models/vapid-details-model';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\nimport IIDModel from '../models/iid-model';\nimport arrayBufferToBase64 from '../helpers/array-buffer-to-base64';\nvar SENDER_ID_OPTION_NAME = 'messagingSenderId'; // Database cache should be invalidated once a week.\n\nexport var TOKEN_EXPIRATION_MILLIS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nvar ControllerInterface =\n/** @class */\nfunction () {\n  /**\n   * An interface of the Messaging Service API\n   * @param {!firebase.app.App} app\n   */\n  function ControllerInterface(app) {\n    var _this = this;\n\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n\n    if (!app.options[SENDER_ID_OPTION_NAME] || typeof app.options[SENDER_ID_OPTION_NAME] !== 'string') {\n      throw this.errorFactory_.create(Errors.codes.BAD_SENDER_ID);\n    }\n\n    this.messagingSenderId_ = app.options[SENDER_ID_OPTION_NAME];\n    this.tokenDetailsModel_ = new TokenDetailsModel();\n    this.vapidDetailsModel_ = new VapidDetailsModel();\n    this.iidModel_ = new IIDModel();\n    this.app = app;\n    this.INTERNAL = {};\n\n    this.INTERNAL.delete = function () {\n      return _this.delete();\n    };\n  }\n  /**\n   * @export\n   */\n\n\n  ControllerInterface.prototype.getToken = function () {\n    var _this = this; // Check with permissions\n\n\n    var currentPermission = this.getNotificationPermission_();\n\n    if (currentPermission !== NOTIFICATION_PERMISSION.granted) {\n      if (currentPermission === NOTIFICATION_PERMISSION.denied) {\n        return Promise.reject(this.errorFactory_.create(Errors.codes.NOTIFICATIONS_BLOCKED));\n      } // We must wait for permission to be granted\n\n\n      return Promise.resolve(null);\n    }\n\n    var swReg;\n    return this.getSWRegistration_().then(function (reg) {\n      swReg = reg;\n      return _this.tokenDetailsModel_.getTokenDetailsFromSWScope(swReg.scope);\n    }).then(function (tokenDetails) {\n      if (tokenDetails) {\n        return _this.manageExistingToken(tokenDetails, swReg);\n      }\n\n      return _this.getNewToken(swReg);\n    });\n  };\n  /**\n   * manageExistingToken is triggered if there's an existing FCM token in the\n   * database and it can take 3 different actions:\n   * 1) Retrieve the existing FCM token from the database.\n   * 2) If VAPID details have changed: Delete the existing token and create a\n   * new one with the new VAPID key.\n   * 3) If the database cache is invalidated: Send a request to FCM to update\n   * the token, and to check if the token is still valid on FCM-side.\n   */\n\n\n  ControllerInterface.prototype.manageExistingToken = function (tokenDetails, swReg) {\n    var _this = this;\n\n    return this.isTokenStillValid(tokenDetails).then(function (isValid) {\n      if (isValid) {\n        var now = Date.now();\n\n        if (now < tokenDetails['createTime'] + TOKEN_EXPIRATION_MILLIS) {\n          return tokenDetails['fcmToken'];\n        } else {\n          return _this.updateToken(tokenDetails, swReg);\n        }\n      } else {\n        // If the VAPID details are updated, delete the existing token,\n        // and create a new one.\n        return _this.deleteToken(tokenDetails['fcmToken']).then(function () {\n          return _this.getNewToken(swReg);\n        });\n      }\n    });\n  };\n  /*\n   * Checks if the tokenDetails match the details provided in the clients.\n   */\n\n\n  ControllerInterface.prototype.isTokenStillValid = function (tokenDetails) {\n    // TODO Validate rest of the details.\n    return this.getPublicVapidKey_().then(function (publicKey) {\n      if (arrayBufferToBase64(publicKey) !== tokenDetails['vapidKey']) {\n        return false;\n      }\n\n      return true;\n    });\n  };\n\n  ControllerInterface.prototype.updateToken = function (tokenDetails, swReg) {\n    var _this = this;\n\n    var publicVapidKey;\n    var updatedToken;\n    var subscription;\n    return this.getPublicVapidKey_().then(function (publicKey) {\n      publicVapidKey = publicKey;\n      return _this.getPushSubscription_(swReg, publicVapidKey);\n    }).then(function (pushSubscription) {\n      subscription = pushSubscription;\n      return _this.iidModel_.updateToken(_this.messagingSenderId_, tokenDetails['fcmToken'], tokenDetails['fcmPushSet'], subscription, publicVapidKey);\n    }).catch(function (err) {\n      return _this.deleteToken(tokenDetails['fcmToken']).then(function () {\n        throw err;\n      });\n    }).then(function (token) {\n      updatedToken = token;\n      var allDetails = {\n        swScope: swReg.scope,\n        vapidKey: publicVapidKey,\n        subscription: subscription,\n        fcmSenderId: _this.messagingSenderId_,\n        fcmToken: updatedToken,\n        fcmPushSet: tokenDetails['fcmPushSet']\n      };\n      return _this.tokenDetailsModel_.saveTokenDetails(allDetails);\n    }).then(function () {\n      return _this.vapidDetailsModel_.saveVapidDetails(swReg.scope, publicVapidKey);\n    }).then(function () {\n      return updatedToken;\n    });\n  };\n\n  ControllerInterface.prototype.getNewToken = function (swReg) {\n    var _this = this;\n\n    var publicVapidKey;\n    var subscription;\n    var tokenDetails;\n    return this.getPublicVapidKey_().then(function (publicKey) {\n      publicVapidKey = publicKey;\n      return _this.getPushSubscription_(swReg, publicVapidKey);\n    }).then(function (pushSubscription) {\n      subscription = pushSubscription;\n      return _this.iidModel_.getToken(_this.messagingSenderId_, subscription, publicVapidKey);\n    }).then(function (iidTokenDetails) {\n      tokenDetails = iidTokenDetails;\n      var allDetails = {\n        swScope: swReg.scope,\n        vapidKey: publicVapidKey,\n        subscription: subscription,\n        fcmSenderId: _this.messagingSenderId_,\n        fcmToken: tokenDetails['token'],\n        fcmPushSet: tokenDetails['pushSet']\n      };\n      return _this.tokenDetailsModel_.saveTokenDetails(allDetails);\n    }).then(function () {\n      return _this.vapidDetailsModel_.saveVapidDetails(swReg.scope, publicVapidKey);\n    }).then(function () {\n      return tokenDetails['token'];\n    });\n  };\n  /**\n   * This method deletes tokens that the token manager looks after,\n   * unsubscribes the token from FCM  and then unregisters the push\n   * subscription if it exists. It returns a promise that indicates\n   * whether or not the unsubscribe request was processed successfully.\n   * @export\n   */\n\n\n  ControllerInterface.prototype.deleteToken = function (token) {\n    var _this = this;\n\n    return this.tokenDetailsModel_.deleteToken(token).then(function (details) {\n      return _this.iidModel_.deleteToken(details['fcmSenderId'], details['fcmToken'], details['fcmPushSet']);\n    }).then(function () {\n      return _this.getSWRegistration_().then(function (registration) {\n        if (registration) {\n          return registration.pushManager.getSubscription();\n        }\n      }).then(function (subscription) {\n        if (subscription) {\n          return subscription.unsubscribe();\n        }\n      });\n    });\n  };\n\n  ControllerInterface.prototype.getSWRegistration_ = function () {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  };\n\n  ControllerInterface.prototype.getPublicVapidKey_ = function () {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  }; //\n  // The following methods should only be available in the window.\n  //\n\n\n  ControllerInterface.prototype.requestPermission = function () {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n\n  ControllerInterface.prototype.getPushSubscription_ = function (registration, publicVapidKey) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n  /**\n   * @export\n   * @param {!ServiceWorkerRegistration} registration\n   */\n\n\n  ControllerInterface.prototype.useServiceWorker = function (registration) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n  /**\n   * @export\n   * @param {!string} b64PublicKey\n   */\n\n\n  ControllerInterface.prototype.usePublicVapidKey = function (b64PublicKey) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver\n   * @param {function(!Error)=} optError\n   * @param {function()=} optCompleted\n   * @return {!function()}\n   */\n\n\n  ControllerInterface.prototype.onMessage = function (nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n\n\n  ControllerInterface.prototype.onTokenRefresh = function (nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }; //\n  // The following methods are used by the service worker only.\n  //\n\n  /**\n   * @export\n   * @param {function(Object)} callback\n   */\n\n\n  ControllerInterface.prototype.setBackgroundMessageHandler = function (callback) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_SW);\n  }; //\n  // The following methods are used by the service themselves and not exposed\n  // publicly or not expected to be used by developers.\n  //\n\n  /**\n   * This method is required to adhere to the Firebase interface.\n   * It closes any currently open indexdb database connections.\n   */\n\n\n  ControllerInterface.prototype.delete = function () {\n    return Promise.all([this.tokenDetailsModel_.closeDatabase(), this.vapidDetailsModel_.closeDatabase()]);\n  };\n  /**\n   * Returns the current Notification Permission state.\n   * @private\n   * @return {string} The currenct permission state.\n   */\n\n\n  ControllerInterface.prototype.getNotificationPermission_ = function () {\n    return Notification.permission;\n  };\n\n  ControllerInterface.prototype.getTokenDetailsModel = function () {\n    return this.tokenDetailsModel_;\n  };\n\n  ControllerInterface.prototype.getVapidDetailsModel = function () {\n    return this.vapidDetailsModel_;\n  };\n  /**\n   * @protected\n   * @returns {IIDModel}\n   */\n\n\n  ControllerInterface.prototype.getIIDModel = function () {\n    return this.iidModel_;\n  };\n\n  return ControllerInterface;\n}();\n\nexport default ControllerInterface;","map":{"version":3,"sources":["../src/controllers/controller-interface.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nimport { ErrorFactory } from '@firebase/util';\nimport Errors from '../models/errors';\nimport TokenDetailsModel from '../models/token-details-model';\nimport VapidDetailsModel from '../models/vapid-details-model';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\nimport IIDModel from '../models/iid-model';\nimport arrayBufferToBase64 from '../helpers/array-buffer-to-base64';\n\nconst SENDER_ID_OPTION_NAME = 'messagingSenderId';\n// Database cache should be invalidated once a week.\nexport const TOKEN_EXPIRATION_MILLIS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport default class ControllerInterface {\n  public app;\n  public INTERNAL;\n  protected errorFactory_;\n  private messagingSenderId_: string;\n  private tokenDetailsModel_: TokenDetailsModel;\n  private vapidDetailsModel_: VapidDetailsModel;\n  private iidModel_: IIDModel;\n\n  /**\n   * An interface of the Messaging Service API\n   * @param {!firebase.app.App} app\n   */\n  constructor(app) {\n    this.errorFactory_ = new ErrorFactory('messaging', 'Messaging', Errors.map);\n\n    if (\n      !app.options[SENDER_ID_OPTION_NAME] ||\n      typeof app.options[SENDER_ID_OPTION_NAME] !== 'string'\n    ) {\n      throw this.errorFactory_.create(Errors.codes.BAD_SENDER_ID);\n    }\n\n    this.messagingSenderId_ = app.options[SENDER_ID_OPTION_NAME];\n\n    this.tokenDetailsModel_ = new TokenDetailsModel();\n    this.vapidDetailsModel_ = new VapidDetailsModel();\n    this.iidModel_ = new IIDModel();\n\n    this.app = app;\n    this.INTERNAL = {};\n    this.INTERNAL.delete = () => this.delete();\n  }\n\n  /**\n   * @export\n   */\n  getToken(): Promise<string | null> {\n    // Check with permissions\n    const currentPermission = this.getNotificationPermission_();\n    if (currentPermission !== NOTIFICATION_PERMISSION.granted) {\n      if (currentPermission === NOTIFICATION_PERMISSION.denied) {\n        return Promise.reject(\n          this.errorFactory_.create(Errors.codes.NOTIFICATIONS_BLOCKED)\n        );\n      }\n\n      // We must wait for permission to be granted\n      return Promise.resolve(null);\n    }\n    let swReg: ServiceWorkerRegistration;\n    return this.getSWRegistration_()\n      .then(reg => {\n        swReg = reg;\n        return this.tokenDetailsModel_.getTokenDetailsFromSWScope(swReg.scope);\n      })\n      .then(tokenDetails => {\n        if (tokenDetails) {\n          return this.manageExistingToken(tokenDetails, swReg);\n        }\n        return this.getNewToken(swReg);\n      });\n  }\n\n  /**\n   * manageExistingToken is triggered if there's an existing FCM token in the\n   * database and it can take 3 different actions:\n   * 1) Retrieve the existing FCM token from the database.\n   * 2) If VAPID details have changed: Delete the existing token and create a\n   * new one with the new VAPID key.\n   * 3) If the database cache is invalidated: Send a request to FCM to update\n   * the token, and to check if the token is still valid on FCM-side.\n   */\n  private manageExistingToken(\n    tokenDetails: Object,\n    swReg: ServiceWorkerRegistration\n  ): Promise<string> {\n    return this.isTokenStillValid(tokenDetails).then(isValid => {\n      if (isValid) {\n        const now = Date.now();\n        if (now < tokenDetails['createTime'] + TOKEN_EXPIRATION_MILLIS) {\n          return tokenDetails['fcmToken'];\n        } else {\n          return this.updateToken(tokenDetails, swReg);\n        }\n      } else {\n        // If the VAPID details are updated, delete the existing token,\n        // and create a new one.\n        return this.deleteToken(tokenDetails['fcmToken']).then(() => {\n          return this.getNewToken(swReg);\n        });\n      }\n    });\n  }\n\n  /*\n   * Checks if the tokenDetails match the details provided in the clients.\n   */\n  private isTokenStillValid(tokenDetails: Object): Promise<Boolean> {\n    // TODO Validate rest of the details.\n    return this.getPublicVapidKey_().then(publicKey => {\n      if (arrayBufferToBase64(publicKey) !== tokenDetails['vapidKey']) {\n        return false;\n      }\n      return true;\n    });\n  }\n\n  private updateToken(\n    tokenDetails: Object,\n    swReg: ServiceWorkerRegistration\n  ): Promise<string> {\n    let publicVapidKey: Uint8Array;\n    let updatedToken: string;\n    let subscription: PushSubscription;\n    return this.getPublicVapidKey_()\n      .then(publicKey => {\n        publicVapidKey = publicKey;\n        return this.getPushSubscription_(swReg, publicVapidKey);\n      })\n      .then(pushSubscription => {\n        subscription = pushSubscription;\n        return this.iidModel_.updateToken(\n          this.messagingSenderId_,\n          tokenDetails['fcmToken'],\n          tokenDetails['fcmPushSet'],\n          subscription,\n          publicVapidKey\n        );\n      })\n      .catch(err => {\n        return this.deleteToken(tokenDetails['fcmToken']).then(() => {\n          throw err;\n        });\n      })\n      .then(token => {\n        updatedToken = token;\n        const allDetails = {\n          swScope: swReg.scope,\n          vapidKey: publicVapidKey,\n          subscription: subscription,\n          fcmSenderId: this.messagingSenderId_,\n          fcmToken: updatedToken,\n          fcmPushSet: tokenDetails['fcmPushSet']\n        };\n        return this.tokenDetailsModel_.saveTokenDetails(allDetails);\n      })\n      .then(() => {\n        return this.vapidDetailsModel_.saveVapidDetails(\n          swReg.scope,\n          publicVapidKey\n        );\n      })\n      .then(() => {\n        return updatedToken;\n      });\n  }\n\n  private getNewToken(swReg: ServiceWorkerRegistration): Promise<string> {\n    let publicVapidKey: Uint8Array;\n    let subscription: PushSubscription;\n    let tokenDetails: Object;\n    return this.getPublicVapidKey_()\n      .then(publicKey => {\n        publicVapidKey = publicKey;\n        return this.getPushSubscription_(swReg, publicVapidKey);\n      })\n      .then(pushSubscription => {\n        subscription = pushSubscription;\n        return this.iidModel_.getToken(\n          this.messagingSenderId_,\n          subscription,\n          publicVapidKey\n        );\n      })\n      .then(iidTokenDetails => {\n        tokenDetails = iidTokenDetails;\n        const allDetails = {\n          swScope: swReg.scope,\n          vapidKey: publicVapidKey,\n          subscription: subscription,\n          fcmSenderId: this.messagingSenderId_,\n          fcmToken: tokenDetails['token'],\n          fcmPushSet: tokenDetails['pushSet']\n        };\n        return this.tokenDetailsModel_.saveTokenDetails(allDetails);\n      })\n      .then(() => {\n        return this.vapidDetailsModel_.saveVapidDetails(\n          swReg.scope,\n          publicVapidKey\n        );\n      })\n      .then(() => {\n        return tokenDetails['token'];\n      });\n  }\n\n  /**\n   * This method deletes tokens that the token manager looks after,\n   * unsubscribes the token from FCM  and then unregisters the push\n   * subscription if it exists. It returns a promise that indicates\n   * whether or not the unsubscribe request was processed successfully.\n   * @export\n   */\n  deleteToken(token: string): Promise<Boolean> {\n    return this.tokenDetailsModel_\n      .deleteToken(token)\n      .then(details => {\n        return this.iidModel_.deleteToken(\n          details['fcmSenderId'],\n          details['fcmToken'],\n          details['fcmPushSet']\n        );\n      })\n      .then(() => {\n        return this.getSWRegistration_()\n          .then(registration => {\n            if (registration) {\n              return registration.pushManager.getSubscription();\n            }\n          })\n          .then(subscription => {\n            if (subscription) {\n              return subscription.unsubscribe();\n            }\n          });\n      });\n  }\n\n  getSWRegistration_(): Promise<ServiceWorkerRegistration> {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  }\n\n  getPublicVapidKey_(): Promise<Uint8Array> {\n    throw this.errorFactory_.create(Errors.codes.SHOULD_BE_INHERITED);\n  }\n\n  //\n  // The following methods should only be available in the window.\n  //\n\n  requestPermission() {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  getPushSubscription_(\n    registration,\n    publicVapidKey\n  ): Promise<PushSubscription> {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!ServiceWorkerRegistration} registration\n   */\n  useServiceWorker(registration) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!string} b64PublicKey\n   */\n  usePublicVapidKey(b64PublicKey) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver\n   * @param {function(!Error)=} optError\n   * @param {function()=} optCompleted\n   * @return {!function()}\n   */\n  onMessage(nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n  onTokenRefresh(nextOrObserver, optError, optCompleted) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_WINDOW);\n  }\n\n  //\n  // The following methods are used by the service worker only.\n  //\n\n  /**\n   * @export\n   * @param {function(Object)} callback\n   */\n  setBackgroundMessageHandler(callback) {\n    throw this.errorFactory_.create(Errors.codes.AVAILABLE_IN_SW);\n  }\n\n  //\n  // The following methods are used by the service themselves and not exposed\n  // publicly or not expected to be used by developers.\n  //\n\n  /**\n   * This method is required to adhere to the Firebase interface.\n   * It closes any currently open indexdb database connections.\n   */\n  delete() {\n    return Promise.all([\n      this.tokenDetailsModel_.closeDatabase(),\n      this.vapidDetailsModel_.closeDatabase()\n    ]);\n  }\n\n  /**\n   * Returns the current Notification Permission state.\n   * @private\n   * @return {string} The currenct permission state.\n   */\n  getNotificationPermission_() {\n    return (Notification as any).permission;\n  }\n\n  getTokenDetailsModel(): TokenDetailsModel {\n    return this.tokenDetailsModel_;\n  }\n\n  getVapidDetailsModel(): VapidDetailsModel {\n    return this.vapidDetailsModel_;\n  }\n\n  /**\n   * @protected\n   * @returns {IIDModel}\n   */\n  getIIDModel() {\n    return this.iidModel_;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}